# having discovered the wonderful v.what feature of GRASS, I will now
# load all the data in Natural Earth 10m into GRASS just to see how
# big it is and if I can mirror it to the server

# create a new project for this

grass74 -c EPSG:4326 /home/user/GRASS/naturalearth/

# TODO: see if there are any NON-shape files in these dirs

\ls ~/NOBACKUP/EARTHDATA/NATURALEARTH/10m_cultural/*.shp | perl -anle 'print "v.in.ogr $_"' | tee temp.sh

sh temp.sh

# the above takes a while

# testing

# below gives WAY too much
# g.list type=all | perl -nle 'print "v.what -a -m map=$_ 
#  coordinates=-106.1,35.1"' | sh > out1.txt

g.list type=all | perl -nle 'print "v.what -a map=$_ 
 coordinates=-106.1,35.1 type=area,face,kernel"' | sh > out1.txt

# the cultural data takes up 584M

# TODO: try multi map format above?

# TODO: some of these SHP files are rasters??

# TODO: if too big, selectively import SHP files

# TODO: don't forget 10m_physical

# TODO: add GeoTiffs that I use that are outside naturalearth

# TODO: add vector maps I use outside naturalearth (if any) to this data batch

# can we create vector maps on the fly?!

g.region n=90 s=-90 w=-180 e=180

d.mon wx0

d.vect ne_10m_time_zones

v.colors map=ne_10m_time_zones color=roygbiv use=attr column=zone

# add a color column for raster use

v.colors map=ne_10m_time_zones color=roygbiv use=attr column=zone 
 rgb_column=rgb

# lets limit the region and create a 256x256 PNG maybe

g.region n=36 s=34 w=-120 e=-105 rows=256 cols=256

# v.to.rast input=ne_10m_time_zones output=temp_123 rgb_column=rgb

v.to.rast input=ne_10m_time_zones output=temp_123 rgb_column=rgb use=cat

r.out.gdal input=temp_123 output=/tmp/foo.png format=PNG

# above works

# can we import landuse?

r.import input=/mnt/villa/user/NOBACKUP/EARTHDATA/LANDUSE/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2015-v2.0.7.tif output=landuse

d.mon wx0

d.rast landuse

# and SRTM?

r.in.srtm -1 input=/mnt/kemptown/NOBACKUP/EARTHDATA/ELEVATION/SRTM1/SRTMGL1/N33W099

# now doing "grass74 -c EPSG:4326 /home/user/GRASS/srtm1/" to import SRTM1 data

r.in.srtm -1 input=N19W078 output=srtm1

r.in.srtm -1 input=N40W118 output=srtm1

r.in.srtm -1 input=N40W118,N19W078 output=strm1

# above fails can only do one at a time

# below 14 May 2019

v.in.ogr ~/NOBACKUP/EARTHDATA/ANIMALS/REPTILES.shp

# above takes forever, gave up

# below 16 May 2019

# grass74 -text ~/GRASS/srtm1/PERMANENT

r.in.srtm -1 input=/mnt/kemptown/NOBACKUP/EARTHDATA/ELEVATION/SRTM1/SRTMGL1/N33W099

r.in.srtm -1 input=/mnt/kemptown/NOBACKUP/EARTHDATA/ELEVATION/SRTM1/SRTMGL1/N33W098

r.in.srtm -1 input=/mnt/kemptown/NOBACKUP/EARTHDATA/ELEVATION/SRTM1/SRTMGL1/N33W097

r.in.srtm -1 input=/mnt/kemptown/NOBACKUP/EARTHDATA/ELEVATION/SRTM1/SRTMGL1/N33W096

r.in.srtm -1 input=/mnt/kemptown/NOBACKUP/EARTHDATA/ELEVATION/SRTM1/SRTMGL1/N33W095

# gluing

r.patch input=N33W099,N33W098,N33W097,N33W096,N33W095 output=strmtest1

# fail due to bad region settings

g.remove type=all name=strmtest1 -f

# set region resolution

g.region raster=N33W099

# and extents

g.region n=90 s=-90 w=-180 e=180

# testing https://gis.stackexchange.com/questions/95701/mosaicking-rasters-in-grass-gis

# this takes forever
r.patch in=N33W099,N33W098,N33W097,N33W096,N33W095 out=mosaic

# this also takes forever
r.patch -s in=N33W099,N33W098,N33W097,N33W096,N33W095 out=mosaic

# below also very slow

r.out.gdal input=N33W099 output=N33W099.tif format=GTiff

# what if we create geotiffs and then an imagemosaic




