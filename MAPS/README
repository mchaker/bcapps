MAP SERVER
==========

[as of 7 May 2019, geoserver installed + will play heavily into this project]

Notes for map server:

  - TODO: consider using HTML canvas directly instead of leaflet to 1)
  give maps a more "scientific" look, 2) avoid forced zooming and
  allow lower-level zooming

  - TODO: add ethniticty information I downloaded

  - TODO: stop using ws.terramapadventure.com and start using
  mapserver.94y.info or something (in progress, ms.94y.info and all terramapadventure.com now point to new server)

  - TODO: get https for whatever domain I end up using

  - TODO: configure geoserver to run as https

  - TODO: create a basic home page similar to TMA

  - Request not in JSON, advise them to send "{cmd: 'help'}"

  - help should include sources and limitations

  - should listen on UDS and client programs can provide web/socket service

  - TODO: create legends for all maps, automatically if possible

  - TODO: test and use geoserver features for both map "tiling" and
  feature location (ie, which polygons are you in, query feature)

  - TODO: recolor the land use map but keep it as GeoTIFF (ie, apply a style to it based on its preferred colors)

  - TODO: set GEOSERVER_HOME and similar env vars if I want to keep using geoserver locally (but maybe not?)

  - NOT: considered hosting slippy tiles myself using mini pbf file,
  but really need a lot more space and can't serve from 
  uber-compressed file

  - NOT: considered overlaying entire large image on Leaflet (instead
  of breaking into tiles) but that doesn't work well

Data provided:

  - Elevation (SRTM 3 second + alt source for high alt) (maybe SRTM 1)

  - Climate (Koeppen-Geiger)

  - Astronomical phenomena (computed) (sun/moon rise/set)

  - Land slope

  - Land use (ESACCI)

  - Sun/moon rise/set map (not just times per location) (TODO: write C
  program to determine subsolar point accurately)

  - TODO: population density?

  - TODO: timezone

  - TODO: nation/state/etc?

  - TODO: Islam prayer times? (like sunrise/sunset)

  - TODO: weather (but just proxying another source?)

  - TODO: allow opacity control

TODO: let user "be" on a 1 arcsecond square as current virtual location
and draw this square on the map

TODO: find English only OSM tileservers if possible

What I have:

  - 200G server on digitalocean

  - binary versions of elevation, climate, land slope and land use
  (but need help combining them)

  - program that computes astronomical phenomena

Data sources and information:

  - http://srtm.csi.cgiar.org/srtmdata/

Help I need w/ map server:

  - Converting front end JS requests to back end file byte requests

  - Gluing large bin files together

  - Returning data consistently and quasi-efficiently

  - Testing accuracy

Basic commands:

  - cmd=(climate|landuse|elevation) lats=, latn=, lonw=, lone= : obtain data for a given bounding box

  - cmd=source data=(climate|landuse|elevation): data source information

  - cmd=key data=(climate|landuse|elevation): the key to convert returned values to meaningful values

  - cmd=meta data=(climate|landuse|elevation): metadata about the various data types (TODO: this may need to be split into sources)

Notes:

  - The GMTED2010 files for far north and far south regions DO exist
  as ZIP files on earthexplorer.usgs.gov, but you have to request them
  as a special case by choosing points or lines within those areas.

  - `gdalinfo 70n120w_20101117_gmted_max075.tif` shows gdal does
  recognize the TIFs I mention above (the rest of the data is in ADF
  format)

Improvements:

  - orthographic global projection, not Mercator/equirectangular (EPSG:9840?)

TODO later:

  - TODO: reduce disk space on digitalocean (may have to create new
  share, copy, and delete the old one) to not pay for unused resources

  - TODO: look into "accessible" maps for the color blind or similar

  - TODO: if styling maps, may have to recreate tile caches

WFS Stuff:

Here's the data geoserver lets me query on my maps (and how I got that data):

This curl command gives capabilities:

curl -o  wms-capa.txt 'http://ws.terramapadventure.com:8080/geoserver/TMA-YAMC/wms?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetCapabilities'

grep for <Name> gives (among other things):

        <Name>Beck_KG_V1_present_0p0083</Name>
        <Name>ESACCI-LC-L4-LCCS-Map-300m-P1Y-2015-v2.0.7</Name>
        <Name>ne_10m_admin_0_countries</Name>
        <Name>ne_10m_time_zones</Name>
        <Name>ne_10m_urban_areas</Name>
        <Name>ne_10m_admin_1_states_provinces</Name>

These are the queryable layers.

curl -o `timestamp` 'http://ws.terramapadventure.com:8080/geoserver/TMA-YAMC/wcs?SERVICE=WCS&VERSION=1.1.1&REQUEST=DescribeCoverage&identifiers=Beck_KG_V1_present_0p0083'

The output of the above (cleaned up w/ tidy -xml) shows this layer has
only one key:

<wcs:Key>PALETTE_INDEX</wcs:Key>

To actually query the value of this key at a given point (example w/
different map)

curl -o `timestamp` 'http://ws.terramapadventure.com:8080/geoserver/wfs?service=wfs&version=2.0.0&request=GetPropertyValue&bbox=34,-107,36,-105&typeNames=TMA-YAMC:ne_10m_admin_0_countries&valueReference=NAME_EN'

This gives all the VECTOR maps and features at once:

curl -o `timestamp` 'http://ws.terramapadventure.com:8080/geoserver/TMA-YAMC/wfs?SERVICE=WFS&VERSION=1.1.1&REQUEST=DescribeFeatureType'

  <xsd:complexType name="ne_10m_admin_0_countriesType">

Raster maps:

curl -o `timestamp` 'http://ws.terramapadventure.com:8080/geoserver/TMA-YAMC/wcs?SERVICE=WCS&VERSION=1.1.1&REQUEST=GetCapabilities'

lists all raster maps (but not what I can query from them)

<ows:Title>Beck_KG_V1_present_0p0083</ows:Title>
[...]

to see what I can query:

curl -o `timestamp` 'http://ws.terramapadventure.com:8080/geoserver/TMA-YAMC/wcs?SERVICE=WCS&VERSION=1.1.1&REQUEST=DescribeCoverage&IDENTIFIERS=Beck_KG_V1_present_0p0083,ESACCI-LC-L4-LCCS-Map-300m-P1Y-2015-v2.0.7,gpw_v4_population_count_rev11_2020_30_sec'

URLS for data we actually want (as of maps I had uploaded on 5/13/19):

TMA-YAMC:Beck_KG_V1_present_0p0083 PALETTE_INDEX (only one available)

ESACCI-LC-L4-LCCS-Map-300m-P1Y-2015-v2.0.7 GRAY_INDEX (only one avail)

gpw_v4_population_count_rev11_2020_30_sec GRAY_INDEX (only one avail)

ne_10m_admin_0_countries NAME_EN

ne_10m_admin_1_states_provinces name_en

tz_name1st and/or utc_format

ne_10m_urban_areas (no useful fields, just whether you are in one or not)









OLD STUFF
=========

Mercator maps are normally drawn with the North Pole at top, Equator
in the middle and South Pole at the bottom.

This project aims to use proj4 and openstreetmap.org and convert's
"convert -distort Perspective" to create Mercator (and other
projection) maps with arbitrary north/south poles and direction.

This isn't trivial even for static maps, since the slippy tile level
you have to use varies with position. If you put a large city at the
north pole, for example, you will need more detail in that area, since
Mercator maps use more area near the poles.

Ultimate goal is to create a map that overlays google maps with any
given projection and parameters. This means find and computing the
reshaped slippy tiles in real time.

See also:

http://gis.stackexchange.com/questions/29101/create-mercator-map-with-arbitrary-center-orientation

