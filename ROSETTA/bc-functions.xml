# These are the functions I convert into various languages. The body
# *must* be in Mathematica's "FullForm" (not InputForm or FortranForm
# or CForm)

# the code below exports to fullform in a file
# Export["/tmp/full.txt", FullForm[x^2], "String"]

# fields:

# body: the body of the function in Mathematica's FullForm
# nice: a "prettyprint" version of function (not LaTeX)
# desc: a description of the function
# vars: the named arguments to the function, as a comma separated list
# TODO: argtest is currently single list of args = bad!
# argtest: any number of argument lists to test, internally containing:
#  testargs: the arguments to test
#  answer: the answer for given set of testargs
# active: whether or not to include this function in the result

# TODO: test harness, but probably not part of function

# TODO: allow for default arguments?

# macros:

# <LANG>: the language into which the function is being translated

<function name="translatedLngLat2OrigLngLat">
<active>1</active>
<nice>translatedLngLat2OrigLngLat(tha, pha, thb, phb, thc, phc)</nice>
<vars>tha,pha,thb,phb,thc,phc</vars>
<desc>Does the inverse of lnglat2translatedLngLat-- returns {0,0} to {tha, pha}, returns other translated points to original longitude/longitude</desc>
<argtest>0.56979, -0.00200045, -1.59657, 0.344406, 0.94131, -0.898082</argtest>
<answer>(0.964949, -1.1642)</answer>
<body>
List[ArcTan[Plus[Times[Cos[pha],Cos[phc],Cos[tha],Cos[thc]],Times[-32,Power[Cos[phb],2],Power[Plus[-20,Times[-4,Cos[Times[2,pha]]],Times[6,Cos[Plus[Times[2,pha],Times[-2,phb]]]],Times[-4,Cos[Times[2,phb]]],Times[6,Cos[Times[2,Plus[pha,phb]]]],Times[4,Cos[Plus[Times[2,tha],Times[-2,thb]]]],Times[2,Cos[Times[2,Plus[pha,tha,Times[-1,thb]]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],tha,Times[-1,thb]]]],Cos[Times[2,Plus[pha,Times[-1,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[phb,tha,Times[-1,thb]]]]],Cos[Times[2,Plus[pha,phb,tha,Times[-1,thb]]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[pha,Times[-1,tha],thb]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],Times[-1,tha],thb]]],Cos[Times[2,Plus[pha,Times[-1,phb],Times[-1,tha],thb]]],Times[2,Cos[Times[2,Plus[phb,Times[-1,tha],thb]]]],Cos[Times[2,Plus[pha,phb,Times[-1,tha],thb]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],Times[-1,tha],thb]]]],-1],Sin[phc],Sin[Plus[tha,Times[-1,thb]]],Plus[Times[Sin[pha],Sin[thb]],Times[-1,Cos[pha],Sin[tha],Tan[phb]]],Power[Plus[1,Power[Plus[Times[Cot[Plus[tha,Times[-1,thb]]],Sin[pha]],Times[-1,Cos[pha],Csc[Plus[tha,Times[-1,thb]]],Tan[phb]]],2]],Rational[1,2]]],Times[32,Power[Cos[phb],2],Cos[phc],Power[Plus[-20,Times[-4,Cos[Times[2,pha]]],Times[6,Cos[Plus[Times[2,pha],Times[-2,phb]]]],Times[-4,Cos[Times[2,phb]]],Times[6,Cos[Times[2,Plus[pha,phb]]]],Times[4,Cos[Plus[Times[2,tha],Times[-2,thb]]]],Times[2,Cos[Times[2,Plus[pha,tha,Times[-1,thb]]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],tha,Times[-1,thb]]]],Cos[Times[2,Plus[pha,Times[-1,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[phb,tha,Times[-1,thb]]]]],Cos[Times[2,Plus[pha,phb,tha,Times[-1,thb]]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[pha,Times[-1,tha],thb]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],Times[-1,tha],thb]]],Cos[Times[2,Plus[pha,Times[-1,phb],Times[-1,tha],thb]]],Times[2,Cos[Times[2,Plus[phb,Times[-1,tha],thb]]]],Cos[Times[2,Plus[pha,phb,Times[-1,tha],thb]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],Times[-1,tha],thb]]]],-1],Power[Sin[Plus[tha,Times[-1,thb]]],2],Sin[thc],Power[Plus[1,Power[Plus[Times[Cot[Plus[tha,Times[-1,thb]]],Sin[pha]],Times[-1,Cos[pha],Csc[Plus[tha,Times[-1,thb]]],Tan[phb]]],2]],Rational[1,2]],Plus[Times[Cos[thb],Csc[Plus[tha,Times[-1,thb]]],Power[Sin[pha],2]],Times[Cos[pha],Plus[Times[Cos[pha],Sin[tha]],Times[-1,Cos[tha],Csc[Plus[tha,Times[-1,thb]]],Sin[pha],Tan[phb]]]]]]],Plus[Times[Cos[pha],Cos[phc],Cos[thc],Sin[tha]],Times[-32,Power[Cos[phb],2],Power[Plus[-20,Times[-4,Cos[Times[2,pha]]],Times[6,Cos[Plus[Times[2,pha],Times[-2,phb]]]],Times[-4,Cos[Times[2,phb]]],Times[6,Cos[Times[2,Plus[pha,phb]]]],Times[4,Cos[Plus[Times[2,tha],Times[-2,thb]]]],Times[2,Cos[Times[2,Plus[pha,tha,Times[-1,thb]]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],tha,Times[-1,thb]]]],Cos[Times[2,Plus[pha,Times[-1,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[phb,tha,Times[-1,thb]]]]],Cos[Times[2,Plus[pha,phb,tha,Times[-1,thb]]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[pha,Times[-1,tha],thb]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],Times[-1,tha],thb]]],Cos[Times[2,Plus[pha,Times[-1,phb],Times[-1,tha],thb]]],Times[2,Cos[Times[2,Plus[phb,Times[-1,tha],thb]]]],Cos[Times[2,Plus[pha,phb,Times[-1,tha],thb]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],Times[-1,tha],thb]]]],-1],Sin[phc],Sin[Plus[tha,Times[-1,thb]]],Plus[Times[-1,Cos[thb],Sin[pha]],Times[Cos[pha],Cos[tha],Tan[phb]]],Power[Plus[1,Power[Plus[Times[Cot[Plus[tha,Times[-1,thb]]],Sin[pha]],Times[-1,Cos[pha],Csc[Plus[tha,Times[-1,thb]]],Tan[phb]]],2]],Rational[1,2]]],Times[-32,Power[Cos[phb],2],Cos[phc],Power[Plus[-20,Times[-4,Cos[Times[2,pha]]],Times[6,Cos[Plus[Times[2,pha],Times[-2,phb]]]],Times[-4,Cos[Times[2,phb]]],Times[6,Cos[Times[2,Plus[pha,phb]]]],Times[4,Cos[Plus[Times[2,tha],Times[-2,thb]]]],Times[2,Cos[Times[2,Plus[pha,tha,Times[-1,thb]]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],tha,Times[-1,thb]]]],Cos[Times[2,Plus[pha,Times[-1,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[phb,tha,Times[-1,thb]]]]],Cos[Times[2,Plus[pha,phb,tha,Times[-1,thb]]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[pha,Times[-1,tha],thb]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],Times[-1,tha],thb]]],Cos[Times[2,Plus[pha,Times[-1,phb],Times[-1,tha],thb]]],Times[2,Cos[Times[2,Plus[phb,Times[-1,tha],thb]]]],Cos[Times[2,Plus[pha,phb,Times[-1,tha],thb]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],Times[-1,tha],thb]]]],-1],Power[Sin[Plus[tha,Times[-1,thb]]],2],Sin[thc],Plus[Times[Power[Cos[pha],2],Cos[tha]],Times[-1,Csc[Plus[tha,Times[-1,thb]]],Power[Sin[pha],2],Sin[thb]],Times[Cos[pha],Csc[Plus[tha,Times[-1,thb]]],Sin[pha],Sin[tha],Tan[phb]]],Power[Plus[1,Power[Plus[Times[Cot[Plus[tha,Times[-1,thb]]],Sin[pha]],Times[-1,Cos[pha],Csc[Plus[tha,Times[-1,thb]]],Tan[phb]]],2]],Rational[1,2]]]]],ArcTan[Power[Plus[Power[Plus[Times[Cos[pha],Cos[phc],Cos[thc],Sin[tha]],Times[-32,Power[Cos[phb],2],Power[Plus[-20,Times[-4,Cos[Times[2,pha]]],Times[6,Cos[Plus[Times[2,pha],Times[-2,phb]]]],Times[-4,Cos[Times[2,phb]]],Times[6,Cos[Times[2,Plus[pha,phb]]]],Times[4,Cos[Plus[Times[2,tha],Times[-2,thb]]]],Times[2,Cos[Times[2,Plus[pha,tha,Times[-1,thb]]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],tha,Times[-1,thb]]]],Cos[Times[2,Plus[pha,Times[-1,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[phb,tha,Times[-1,thb]]]]],Cos[Times[2,Plus[pha,phb,tha,Times[-1,thb]]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[pha,Times[-1,tha],thb]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],Times[-1,tha],thb]]],Cos[Times[2,Plus[pha,Times[-1,phb],Times[-1,tha],thb]]],Times[2,Cos[Times[2,Plus[phb,Times[-1,tha],thb]]]],Cos[Times[2,Plus[pha,phb,Times[-1,tha],thb]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],Times[-1,tha],thb]]]],-1],Sin[phc],Sin[Plus[tha,Times[-1,thb]]],Plus[Times[-1,Cos[thb],Sin[pha]],Times[Cos[pha],Cos[tha],Tan[phb]]],Power[Plus[1,Power[Plus[Times[Cot[Plus[tha,Times[-1,thb]]],Sin[pha]],Times[-1,Cos[pha],Csc[Plus[tha,Times[-1,thb]]],Tan[phb]]],2]],Rational[1,2]]],Times[-32,Power[Cos[phb],2],Cos[phc],Power[Plus[-20,Times[-4,Cos[Times[2,pha]]],Times[6,Cos[Plus[Times[2,pha],Times[-2,phb]]]],Times[-4,Cos[Times[2,phb]]],Times[6,Cos[Times[2,Plus[pha,phb]]]],Times[4,Cos[Plus[Times[2,tha],Times[-2,thb]]]],Times[2,Cos[Times[2,Plus[pha,tha,Times[-1,thb]]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],tha,Times[-1,thb]]]],Cos[Times[2,Plus[pha,Times[-1,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[phb,tha,Times[-1,thb]]]]],Cos[Times[2,Plus[pha,phb,tha,Times[-1,thb]]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[pha,Times[-1,tha],thb]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],Times[-1,tha],thb]]],Cos[Times[2,Plus[pha,Times[-1,phb],Times[-1,tha],thb]]],Times[2,Cos[Times[2,Plus[phb,Times[-1,tha],thb]]]],Cos[Times[2,Plus[pha,phb,Times[-1,tha],thb]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],Times[-1,tha],thb]]]],-1],Power[Sin[Plus[tha,Times[-1,thb]]],2],Sin[thc],Plus[Times[Power[Cos[pha],2],Cos[tha]],Times[-1,Csc[Plus[tha,Times[-1,thb]]],Power[Sin[pha],2],Sin[thb]],Times[Cos[pha],Csc[Plus[tha,Times[-1,thb]]],Sin[pha],Sin[tha],Tan[phb]]],Power[Plus[1,Power[Plus[Times[Cot[Plus[tha,Times[-1,thb]]],Sin[pha]],Times[-1,Cos[pha],Csc[Plus[tha,Times[-1,thb]]],Tan[phb]]],2]],Rational[1,2]]]],2],Power[Plus[Times[Cos[pha],Cos[phc],Cos[tha],Cos[thc]],Times[-32,Power[Cos[phb],2],Power[Plus[-20,Times[-4,Cos[Times[2,pha]]],Times[6,Cos[Plus[Times[2,pha],Times[-2,phb]]]],Times[-4,Cos[Times[2,phb]]],Times[6,Cos[Times[2,Plus[pha,phb]]]],Times[4,Cos[Plus[Times[2,tha],Times[-2,thb]]]],Times[2,Cos[Times[2,Plus[pha,tha,Times[-1,thb]]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],tha,Times[-1,thb]]]],Cos[Times[2,Plus[pha,Times[-1,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[phb,tha,Times[-1,thb]]]]],Cos[Times[2,Plus[pha,phb,tha,Times[-1,thb]]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[pha,Times[-1,tha],thb]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],Times[-1,tha],thb]]],Cos[Times[2,Plus[pha,Times[-1,phb],Times[-1,tha],thb]]],Times[2,Cos[Times[2,Plus[phb,Times[-1,tha],thb]]]],Cos[Times[2,Plus[pha,phb,Times[-1,tha],thb]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],Times[-1,tha],thb]]]],-1],Sin[phc],Sin[Plus[tha,Times[-1,thb]]],Plus[Times[Sin[pha],Sin[thb]],Times[-1,Cos[pha],Sin[tha],Tan[phb]]],Power[Plus[1,Power[Plus[Times[Cot[Plus[tha,Times[-1,thb]]],Sin[pha]],Times[-1,Cos[pha],Csc[Plus[tha,Times[-1,thb]]],Tan[phb]]],2]],Rational[1,2]]],Times[32,Power[Cos[phb],2],Cos[phc],Power[Plus[-20,Times[-4,Cos[Times[2,pha]]],Times[6,Cos[Plus[Times[2,pha],Times[-2,phb]]]],Times[-4,Cos[Times[2,phb]]],Times[6,Cos[Times[2,Plus[pha,phb]]]],Times[4,Cos[Plus[Times[2,tha],Times[-2,thb]]]],Times[2,Cos[Times[2,Plus[pha,tha,Times[-1,thb]]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],tha,Times[-1,thb]]]],Cos[Times[2,Plus[pha,Times[-1,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[phb,tha,Times[-1,thb]]]]],Cos[Times[2,Plus[pha,phb,tha,Times[-1,thb]]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[pha,Times[-1,tha],thb]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],Times[-1,tha],thb]]],Cos[Times[2,Plus[pha,Times[-1,phb],Times[-1,tha],thb]]],Times[2,Cos[Times[2,Plus[phb,Times[-1,tha],thb]]]],Cos[Times[2,Plus[pha,phb,Times[-1,tha],thb]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],Times[-1,tha],thb]]]],-1],Power[Sin[Plus[tha,Times[-1,thb]]],2],Sin[thc],Power[Plus[1,Power[Plus[Times[Cot[Plus[tha,Times[-1,thb]]],Sin[pha]],Times[-1,Cos[pha],Csc[Plus[tha,Times[-1,thb]]],Tan[phb]]],2]],Rational[1,2]],Plus[Times[Cos[thb],Csc[Plus[tha,Times[-1,thb]]],Power[Sin[pha],2]],Times[Cos[pha],Plus[Times[Cos[pha],Sin[tha]],Times[-1,Cos[tha],Csc[Plus[tha,Times[-1,thb]]],Sin[pha],Tan[phb]]]]]]],2]],Rational[1,2]],Plus[Times[Cos[phc],Cos[thc],Sin[pha]],Times[-32,Cos[pha],Power[Cos[phb],2],Power[Plus[-20,Times[-4,Cos[Times[2,pha]]],Times[6,Cos[Plus[Times[2,pha],Times[-2,phb]]]],Times[-4,Cos[Times[2,phb]]],Times[6,Cos[Times[2,Plus[pha,phb]]]],Times[4,Cos[Plus[Times[2,tha],Times[-2,thb]]]],Times[2,Cos[Times[2,Plus[pha,tha,Times[-1,thb]]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],tha,Times[-1,thb]]]],Cos[Times[2,Plus[pha,Times[-1,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[phb,tha,Times[-1,thb]]]]],Cos[Times[2,Plus[pha,phb,tha,Times[-1,thb]]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[pha,Times[-1,tha],thb]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],Times[-1,tha],thb]]],Cos[Times[2,Plus[pha,Times[-1,phb],Times[-1,tha],thb]]],Times[2,Cos[Times[2,Plus[phb,Times[-1,tha],thb]]]],Cos[Times[2,Plus[pha,phb,Times[-1,tha],thb]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],Times[-1,tha],thb]]]],-1],Sin[phc],Power[Sin[Plus[tha,Times[-1,thb]]],2],Power[Plus[1,Power[Plus[Times[Cot[Plus[tha,Times[-1,thb]]],Sin[pha]],Times[-1,Cos[pha],Csc[Plus[tha,Times[-1,thb]]],Tan[phb]]],2]],Rational[1,2]]],Times[-32,Cos[pha],Power[Cos[phb],2],Cos[phc],Power[Plus[-20,Times[-4,Cos[Times[2,pha]]],Times[6,Cos[Plus[Times[2,pha],Times[-2,phb]]]],Times[-4,Cos[Times[2,phb]]],Times[6,Cos[Times[2,Plus[pha,phb]]]],Times[4,Cos[Plus[Times[2,tha],Times[-2,thb]]]],Times[2,Cos[Times[2,Plus[pha,tha,Times[-1,thb]]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],tha,Times[-1,thb]]]],Cos[Times[2,Plus[pha,Times[-1,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[phb,tha,Times[-1,thb]]]]],Cos[Times[2,Plus[pha,phb,tha,Times[-1,thb]]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],tha,Times[-1,thb]]]],Times[2,Cos[Times[2,Plus[pha,Times[-1,tha],thb]]]],Times[4,Cos[Plus[Times[2,pha],Times[-2,phb],Times[-1,tha],thb]]],Cos[Times[2,Plus[pha,Times[-1,phb],Times[-1,tha],thb]]],Times[2,Cos[Times[2,Plus[phb,Times[-1,tha],thb]]]],Cos[Times[2,Plus[pha,phb,Times[-1,tha],thb]]],Times[-4,Cos[Plus[Times[2,pha],Times[2,phb],Times[-1,tha],thb]]]],-1],Sin[Plus[tha,Times[-1,thb]]],Sin[thc],Plus[Times[Cos[Plus[tha,Times[-1,thb]]],Sin[pha]],Times[-1,Cos[pha],Tan[phb]]],Power[Plus[1,Power[Plus[Times[Cot[Plus[tha,Times[-1,thb]]],Sin[pha]],Times[-1,Cos[pha],Csc[Plus[tha,Times[-1,thb]]],Tan[phb]]],2]],Rational[1,2]]]]]]
</body>
</function>

<function name="lnglat2translatedLngLat">
<active>1</active>
<nice>lnglat2translatedLngLat(tha, pha, thb, phb, thc, phc)</nice>
<vars>tha,pha,thb,phb,thc,phc</vars>
<desc>If longitude/latitude theta1/phi1 are rotated the intersection of the prime meridian and the equator, and theta2/phi2 are rotated to be on the equator, return the new coordinates of theta3, phi3</desc>
<argtest>0.56979, -0.00200045, -1.59657, 0.344406, 0.964949, -1.1642</argtest>
<answer>{0.94131, -0.898082}</answer>
<body>
List[ArcTan[Plus[Times[Cos[pha], Cos[phc], Cos[Plus[tha, Times[-1, thc]]]], Times[Sin[pha], Sin[phc]]], Times[Plus[Times[Cos[pha], Plus[Times[-1, Cos[pha], Power[Sin[Plus[tha, Times[-1, thb]]], -1], Tan[phb]], Times[Cot[Plus[tha, Times[-1, thb]]], Sin[pha]]], Sin[phc]], Times[Cos[phc], Plus[Times[Cos[tha], Plus[Sin[thc], Times[Cos[thc], Plus[Times[-1, Cot[Plus[tha, Times[-1, thb]]], Sin[pha]], Times[Cos[pha], Power[Sin[Plus[tha, Times[-1, thb]]], -1], Tan[phb]]], Sin[pha]]]], Times[Plus[Times[-1, Cos[thc]], Times[Plus[Times[-1, Cot[Plus[tha, Times[-1, thb]]], Sin[pha]], Times[Cos[pha], Power[Sin[Plus[tha, Times[-1, thb]]], -1], Tan[phb]]], Sin[pha], Sin[thc]]], Sin[tha]]]]], Power[Plus[1, Power[Plus[Times[-1, Cos[pha], Power[Sin[Plus[tha, Times[-1, thb]]], -1], Tan[phb]], Times[Cot[Plus[tha, Times[-1, thb]]], Sin[pha]]], 2]], Rational[-1, 2]]]], ArcTan[Power[Plus[Power[Plus[Times[Cos[pha], Cos[phc], Cos[Plus[tha, Times[-1, thc]]]], Times[Sin[pha], Sin[phc]]], 2], Times[Power[Plus[1, Power[Plus[Times[-1, Cos[pha], Power[Sin[Plus[tha, Times[-1, thb]]], -1], Tan[phb]], Times[Cot[Plus[tha, Times[-1, thb]]], Sin[pha]]], 2]], -1], Power[Plus[Times[Cos[pha], Plus[Times[-1, Cos[pha], Power[Sin[Plus[tha, Times[-1, thb]]], -1], Tan[phb]], Times[Cot[Plus[tha, Times[-1, thb]]], Sin[pha]]], Sin[phc]], Times[Cos[phc], Plus[Times[Cos[tha], Plus[Sin[thc], Times[Cos[thc], Plus[Times[-1, Cot[Plus[tha, Times[-1, thb]]], Sin[pha]], Times[Cos[pha], Power[Sin[Plus[tha, Times[-1, thb]]], -1], Tan[phb]]], Sin[pha]]]], Times[Plus[Times[-1, Cos[thc]], Times[Plus[Times[-1, Cot[Plus[tha, Times[-1, thb]]], Sin[pha]], Times[Cos[pha], Power[Sin[Plus[tha, Times[-1, thb]]], -1], Tan[phb]]], Sin[pha], Sin[thc]]], Sin[tha]]]]], 2]]], Rational[1, 2]], Times[Plus[Times[Cos[pha], Plus[Sin[phc], Times[-1, Cos[phc], Power[Sin[Plus[tha, Times[-1, thb]]], -1], Sin[Plus[tha, Times[-1, thc]]], Tan[phb]]]], Times[Cos[phc], Power[Sin[Plus[tha, Times[-1, thb]]], -1], Sin[pha], Sin[Plus[thb, Times[-1, thc]]]]], Power[Plus[1, Power[Plus[Times[-1, Cos[pha], Power[Sin[Plus[tha, Times[-1, thb]]], -1], Tan[phb]], Times[Cot[Plus[tha, Times[-1, thb]]], Sin[pha]]], 2]], Rational[-1, 2]]]]]
</body>
</function>

<function name="xsol">
<active>0</active>
<nice>xsol(h,r,theta)</nice>
<vars>h,r,theta</vars>
<desc>see bc-fuji.m</desc>
<argtest>4.0, 7000.0, 0.0523599</argtest>
<answer>86.5298</answer>
<body>
   Times[Power[Cos[theta], 2], Plus[Times[-1,
      Power[Plus[Times[-1, Power[Plus[h, r], 2]],
        Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]]],
     Times[Plus[h, r], Tan[theta]]]]
</body>
</function>

<function name="zsol">
<active>0</active>
<nice>zsol(h,r,theta)</nice>
<vars>h,r,theta</vars>
<desc>see bc-fuji.m</desc>
<argtest>4.0, 7000.0, 0.0523599</argtest>
<answer>6999.47</answer>
<body>
   Power[Plus[Power[r, 2], Times[-1, Power[Cos[theta], 4], 
      Power[Plus[Power[Plus[Times[-1, Power[Plus[h, r], 2]], 
          Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]], 
        Times[-1, Plus[h, r], Tan[theta]]], 2]]], Rational[1, 2]]
</body>
</function>

# TODO: had to add ArcTan[1,...] artifically since my convertor can't
# handle single argument arctan

<function name="ang">
<active>0</active>
<nice>ang(h,r,theta)</nice>
<vars>h,r,theta</vars>
<desc>see bc-fuji.m</desc>
<argtest>4.0, 7000.0, 0.0523599</argtest>
<answer>0.0123617</answer>
<body>
ArcTan[1,Times[Plus[Times[Plus[h, r], Cos[theta], Sin[theta]], Times[-1, Power[Plus[Times[-1, h, Plus[h, Times[2, r]], Power[Cos[theta], 4]], Times[Power[r, 2], Power[Cos[theta], 2], Power[Sin[theta], 2]]], Rational[1, 2]]]], Power[Plus[Power[r, 2], Times[-1, Power[Plus[Times[-1, Plus[h, r], Cos[theta], Sin[theta]], Power[Plus[Times[-1, h, Plus[h, Times[2, r]], Power[Cos[theta], 4]], Times[Power[r, 2], Power[Cos[theta], 2], Power[Sin[theta], 2]]], Rational[1, 2]]], 2]]], Rational[-1, 2]]]]
</body>
</function>

# again had to add ArcTan[1, ...]
<function name="dist">
<active>0</active>
<nice>dist(h,r,theta)</nice>
<vars>h,r,theta</vars>
<desc>see bc-fuji.m</desc>
<argtest>4.0, 7000.0, 0.0523599</argtest>
<answer>86.532</answer>
<body>
Times[r, ArcTan[1,Times[Plus[Times[Plus[h, r], Cos[theta], Sin[theta]], Times[-1, Power[Plus[Times[-1, h, Plus[h, Times[2, r]], Power[Cos[theta], 4]], Times[Power[r, 2], Power[Cos[theta], 2], Power[Sin[theta], 2]]], Rational[1, 2]]]], Power[Plus[Power[r, 2], Times[-1, Power[Plus[Times[-1, Plus[h, r], Cos[theta], Sin[theta]], Power[Plus[Times[-1, h, Plus[h, Times[2, r]], Power[Cos[theta], 4]], Times[Power[r, 2], Power[Cos[theta], 2], Power[Sin[theta], 2]]], Rational[1, 2]]], 2]]], Rational[-1, 2]]]]]</body>
</function>



# TODO: for php and perl need some sort of array vs scalar printer (print_r?)

<function name="newcoords">
<active>0</active>
<nice>newcoords(h,r,theta,az,lat,lon)</nice>
<vars>h,r,theta,az,lat,lon</vars>
<desc>see bc-fuji.m</desc>
# TODO: must convert argtest numbers to .0 decimals too
<argtest>4.0, 7000.0, 0.0698132, 1.65806, 0.610865, -1.85878</argtest>
<answer>{-1623.7, -5462.79, 4064.66}</answer>
<body>
List[Plus[Times[Power[Cos[theta], 2], Plus[Times[Cos[lon], Sin[az], Sin[lat]], Times[Cos[az], Sin[lon]]], Plus[Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]], Times[-1, Plus[h, r], Tan[theta]]]], Times[Cos[lat], Cos[lon], Power[Plus[Power[r, 2], Times[-1, Power[Cos[theta], 4], Power[Plus[Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]], Times[-1, Plus[h, r], Tan[theta]]], 2]]], Rational[1, 2]]]], Plus[Times[Power[Cos[theta], 2], Plus[Times[Cos[az], Cos[lon]], Times[-1, Sin[az], Sin[lat], Sin[lon]]], Plus[Times[-1, Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]]], Times[Plus[h, r], Tan[theta]]]], Times[Cos[lat], Sin[lon], Power[Plus[Power[r, 2], Times[-1, Power[Cos[theta], 4], Power[Plus[Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]], Times[-1, Plus[h, r], Tan[theta]]], 2]]], Rational[1, 2]]]], Plus[Times[Cos[lat], Power[Cos[theta], 2], Sin[az], Plus[Times[-1, Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]]], Times[Plus[h, r], Tan[theta]]]], Times[Sin[lat], Power[Plus[Power[r, 2], Times[-1, Power[Cos[theta], 4], Power[Plus[Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]], Times[-1, Plus[h, r], Tan[theta]]], 2]]], Rational[1, 2]]]]]
</body>
</function>

<function name="newangles">
<active>0</active>
<nice>newangles(h,r,theta,az,lat,lon)</nice>
<vars>h,r,theta,az,lat,lon</vars>
<desc>see bc-fuji.m</desc>
# TODO: must convert argtest numbers to .0 decimals too
<argtest>4.0, 7000.0, 0.0698132, 1.65806, 0.610865, -1.85878</argtest>
<answer>{-1.85971, 0.619547, 7000.}</answer>
<body>
List[ArcTan[Plus[Times[Power[Cos[theta], 2], Plus[Times[Cos[lon], Sin[az], Sin[lat]], Times[Cos[az], Sin[lon]]], Plus[Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]], Times[-1, Plus[h, r], Tan[theta]]]], Times[Cos[lat], Cos[lon], Power[Plus[Power[r, 2], Times[-1, Power[Cos[theta], 4], Power[Plus[Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]], Times[-1, Plus[h, r], Tan[theta]]], 2]]], Rational[1, 2]]]], Plus[Times[Power[Cos[theta], 2], Plus[Times[Cos[az], Cos[lon]], Times[-1, Sin[az], Sin[lat], Sin[lon]]], Plus[Times[-1, Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]]], Times[Plus[h, r], Tan[theta]]]], Times[Cos[lat], Sin[lon], Power[Plus[Power[r, 2], Times[-1, Power[Cos[theta], 4], Power[Plus[Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]], Times[-1, Plus[h, r], Tan[theta]]], 2]]], Rational[1, 2]]]]], ArcTan[Power[Plus[Power[Plus[Times[Power[Cos[theta], 2], Plus[Times[Cos[lon], Sin[az], Sin[lat]], Times[Cos[az], Sin[lon]]], Plus[Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]], Times[-1, Plus[h, r], Tan[theta]]]], Times[Cos[lat], Cos[lon], Power[Plus[Power[r, 2], Times[-1, Power[Cos[theta], 4], Power[Plus[Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]], Times[-1, Plus[h, r], Tan[theta]]], 2]]], Rational[1, 2]]]], 2], Power[Plus[Times[Power[Cos[theta], 2], Plus[Times[Cos[az], Cos[lon]], Times[-1, Sin[az], Sin[lat], Sin[lon]]], Plus[Times[-1, Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]]], Times[Plus[h, r], Tan[theta]]]], Times[Cos[lat], Sin[lon], Power[Plus[Power[r, 2], Times[-1, Power[Cos[theta], 4], Power[Plus[Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]], Times[-1, Plus[h, r], Tan[theta]]], 2]]], Rational[1, 2]]]], 2]], Rational[1, 2]], Plus[Times[Cos[lat], Power[Cos[theta], 2], Sin[az], Plus[Times[-1, Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]]], Times[Plus[h, r], Tan[theta]]]], Times[Sin[lat], Power[Plus[Power[r, 2], Times[-1, Power[Cos[theta], 4], Power[Plus[Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]], Times[-1, Plus[h, r], Tan[theta]]], 2]]], Rational[1, 2]]]]], Power[Plus[Power[Abs[Plus[Times[Power[Cos[theta], 2], Plus[Times[Cos[lon], Sin[az], Sin[lat]], Times[Cos[az], Sin[lon]]], Plus[Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]], Times[-1, Plus[h, r], Tan[theta]]]], Times[Cos[lat], Cos[lon], Power[Plus[Power[r, 2], Times[-1, Power[Cos[theta], 4], Power[Plus[Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]], Times[-1, Plus[h, r], Tan[theta]]], 2]]], Rational[1, 2]]]]], 2], Power[Abs[Plus[Times[Cos[lat], Power[Cos[theta], 2], Sin[az], Plus[Times[-1, Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]]], Times[Plus[h, r], Tan[theta]]]], Times[Sin[lat], Power[Plus[Power[r, 2], Times[-1, Power[Cos[theta], 4], Power[Plus[Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]], Times[-1, Plus[h, r], Tan[theta]]], 2]]], Rational[1, 2]]]]], 2], Power[Abs[Plus[Times[Power[Cos[theta], 2], Plus[Times[Cos[az], Cos[lon]], Times[-1, Sin[az], Sin[lat], Sin[lon]]], Plus[Times[-1, Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]]], Times[Plus[h, r], Tan[theta]]]], Times[Cos[lat], Sin[lon], Power[Plus[Power[r, 2], Times[-1, Power[Cos[theta], 4], Power[Plus[Power[Plus[Times[-1, Power[Plus[h, r], 2]], Times[Power[r, 2], Power[Sec[theta], 2]]], Rational[1, 2]], Times[-1, Plus[h, r], Tan[theta]]], 2]]], Rational[1, 2]]]]], 2]], Rational[1, 2]]]</body>
</function>

<function name="secant">
<active>0</active>
<nice>sec(x)</nice>
<vars>x</vars>
<desc>Testing secant function, since Mathematica uses it, but most languages don't have it</desc>
<argtest>0.628319</argtest>
<answer>1.23607</answer>
<body>Sec[x]</body>
</function>

# TODO: not really crazy about this function, should be RADecLatLon2azEl
<function name="HADecLat2azEl">
<active>0</active>
<nice>HADecLat2azEl(ha, dec, lat)</nice>
<vars>ha,dec,lat</vars>
<desc>Given the hour angle and declination of a celestial object and the latitude of the observer, return the azimuth and elevation of the object as viewed by the observer</desc>
<argtest>0.891449,-0.891258,-2.06972</argtest>
<answer>{-0.597235, 0.516821}</answer>
<body>List[ArcTan[Plus[Times[Cos[lat], Sin[dec]], Times[-1, Cos[dec], Cos[ha], Sin[lat]]], Times[-1, Cos[dec], Sin[ha]]], ArcTan[Power[Plus[Times[Power[Cos[dec], 2], Power[Sin[ha], 2]], Power[Plus[Times[Cos[lat], Sin[dec]], Times[-1, Cos[dec], Cos[ha], Sin[lat]]], 2]], Rational[1, 2]], Plus[Times[Cos[dec], Cos[ha], Cos[lat]], Times[Sin[dec], Sin[lat]]]]]</body>
</function>

<function name="lngLat2CenterLngLat">
<active>0</active>
<nice>lngLat2CenterLngLat(lng, lat, clng, clat)</nice>
<vars>lng,lat,clng,clat</vars>
<desc>If the world is rotated so that clng, clat are now at 0,0, return the new coordinates of lng, lat</desc>
<body>
List[ArcTan[Plus[Times[Cos[clat], Cos[lat], 
Cos[Plus[clng, Times[-1, lng]]]], Times[Sin[clat], Sin[lat]]], 
Times[-1, Cos[lat], Sin[Plus[clng, Times[-1, lng]]]]], 
ArcTan[Power[Plus[Power[Plus[Times[Cos[clat], Cos[lat], 
Cos[Plus[clng, Times[-1, lng]]]], Times[Sin[clat], Sin[lat]]], 2], 
Times[Power[Cos[lat], 2], Power[Sin[Plus[clng, Times[-1, lng]]], 2]]], 
Rational[1, 2]], Plus[Times[-1, Cos[lat], 
Cos[Plus[clng, Times[-1, lng]]], Sin[clat]], Times[Cos[clat], Sin[lat]]]
]]
</body>
</function>

<function name="slippyDecimal2LngLat">
<active>0</active>
<nice>slippyDecimal2LngLat(x, y, z)</nice>
<vars>x, y, z</vars>
<desc>The longitude and latitude of slippy tile x, y z. If x and y are integers, this is the nw corner of the tile, fractional values for pixels</desc>
<body>
List[Plus[Times[-1, Pi], Times[Power[2, Plus[1, Times[-1, z]]], Pi, x]], 
Gudermannian[Plus[Pi, Times[-1, Power[2, Plus[1, Times[-1, z]]], Pi, y]]]]
</body>
</function>

<function name="lngLat2OrthoXY">
<active>0</active>
<nice>lngLat2OrthoXY(lng, lat)</nice>
<vars>lng, lat</vars>
<desc>The x and y coordinates of lng, lat in the standard orthographic projection</desc>
<body>
If[Greater[Abs[lng], Times[Rational[1, 2], Pi]], List[-1, -1], 
List[Times[Cos[lat], Sin[lng]], Sin[lat]]]
</body>
</function>

<function name="latsDist2LngRange">
<active>0</active>
<nice>latsDist2LngRange(lat1, lat2, d)</nice>
<vars>lat1, lat2, d</vars>
<desc>the positive longitude at lat2 that is distance d from latitude lat1 and longitude 0</desc>
<body>ArcCos[Plus[Times[Cos[d], Sec[lat1], Sec[lat2]], Times[-1, Tan[lat1], Tan[lat2]]]]</body>
</function>

# note, body = FullForm just in case not doc'd elsewhere

# attempt to define a dictionary (using "key: val", not true XML)

<dictionary name="constants">

# below is in km (need to make that clear somewhere or be consistent)
earthMeanRadius: 6378.1370
earthPolarRadius: 6356.7523

# sort of ugly to define this, since some langs already do
# TODO: how long can this be w/o breaking languages
# TODO: is typing an issue here?
pi: 3.1415926535897932385
e: 2.7182818284590452354

</dictionary>

# convert hours/degrees to radians by multiplying

<dictionary name="radians">

degrees: 0.017453292519943295769
hours: 0.26179938779914943654

</dictionary>

# convert time to Unix time using affine transformations
# affine first then multip

<dictionary name="unixtime">

jdAffine: -2440587.5
jdMultip: 86400

# days since J2000

j2000daysAffine: 10957.5
j2000daysMultip: 86400

</dictionary>

# convert lengths to meters by multiplying

<dictionary name="meters">

km: 0.001

# can't use 'm' here, since 'm' means meter itself
miles: 0.00062137119223733396962


</dictionary>
